{"title":"Redis系列(二):Redis的数据类型及命令操作","date":"2018-10-05T15:30:11.000Z","author":"Dmego","link":"2018/10/05/learn-redis-2","comments":true,"tags":["Redis"],"categories":["技术"],"updated":"2019-12-22T18:21:32.533Z","content":"<a id=\"more\"></a>\n<center>\n<img src=\"/2018/10/05/learn-redis-2/redis-white.png\" width=\"250px\">\n</center>\n<h2 id=\"redis-中常用命令\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-中常用命令\"></a> Redis 中常用命令<a href=\"2018/10/05/learn-redis-2#redis-中常用命令\"></a></h2>\n<p>Redis 官方的<a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\">文档</a>是英文版的，当然网上也有大量的中文翻译版,例如:<a href=\"http://doc.redisfans.com/\" target=\"_blank\" rel=\"noopener\">Redis 命令参考</a>。这里只列举常用到几个基本命令。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set key value</td>\n<td>设置 key 值为 value</td>\n</tr>\n<tr>\n<td>get key</td>\n<td>读取 key 的值</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>删除 key</td>\n</tr>\n<tr>\n<td>expire key seconds</td>\n<td>设置 key 的生存时间（seconds 秒后自动删除）</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看 key 剩余生存时间</td>\n</tr>\n<tr>\n<td>exists key</td>\n<td>判断 key 是否存在</td>\n</tr>\n<tr>\n<td>ping</td>\n<td>测试与服务端是否联通</td>\n</tr>\n<tr>\n<td>keys *</td>\n<td>匹配数据库中所有 key</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>查询当前数据库中 key 的数量</td>\n</tr>\n<tr>\n<td>info</td>\n<td>返回关于 Redis 服务器的各种信息和统计数值</td>\n</tr>\n<tr>\n<td>flushdb</td>\n<td>清空当前数据库中的所有 key</td>\n</tr>\n<tr>\n<td>flushall</td>\n<td>清空整个 Redis 服务器的数据( 删除所有数据库的所有 key ）</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>请求服务器关闭与当前客户端的连接( 断开连接 )</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"redis数据类型简介\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis数据类型简介\"></a> Redis数据类型简介<a href=\"2018/10/05/learn-redis-2#redis数据类型简介\"></a></h2>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>存储的值</th>\n<th>读写能力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>字符串，整数或浮点数</td>\n<td>对字符串或一部分字符串执行操作；对整数进行自增和自减操作等</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>包含键值对的无序散列表</td>\n<td>对单个 元素进行增、删、改；获取所以的键值对等</td>\n</tr>\n<tr>\n<td>List</td>\n<td>链表上的节点字符串元素</td>\n<td>推入、弹出元素；修剪、查找、移除元素等</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>各不相同的字符串元素</td>\n<td>对单个 元素进行增、删、改；计算集合 交，并补集等</td>\n</tr>\n<tr>\n<td>Sorted Set</td>\n<td>带分数的有序集合</td>\n<td>对单个 元素进行增、删、改；按照分数范围查元素等</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"字符串类型string\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#字符串类型string\"></a> 字符串类型（String）<a href=\"2018/10/05/learn-redis-2#字符串类型string\"></a></h2>\n<h4 id=\"redis-string-介绍\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-string-介绍\"></a> redis string 介绍<a href=\"2018/10/05/learn-redis-2#redis-string-介绍\"></a></h4>\n<p>虽然 redis 是用 C 编写的，但是在 redis 中没有使用 C 语言的字符串，而是自定义了一个数据结构叫 SDS (simple dynamic string) ——简单动态字符串。是可以修改的，类似java中的 ArrayList。同时它也不像 C 中的字符串那样遇到 <code>\\0</code>字符就认为字符串结束，他不会对存储进去的字符串数据进行任何处理，因此 redis 中的字符串也是二进制安全的。</p>\n<p>redis 的 string 类型可以包含任意数据，包括图片等二进制或者序列化的对象等。单个 <code>value</code> 的值最大上限为 <code>1G</code>字节。</p>\n<h4 id=\"纯字符串操作命令\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#纯字符串操作命令\"></a> 纯字符串操作命令<a href=\"2018/10/05/learn-redis-2#纯字符串操作命令\"></a></h4>\n<p><strong>注</strong>：<em><code>#</code>后面是命令的注释，不可执行</em></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">'hello redis'</span> <span class=\"comment\"># 存值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1 <span class=\"comment\"># 取值</span></span><br><span class=\"line\"><span class=\"string\">\"hello redis\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getset key1 redis <span class=\"comment\"># 将给定key1的值设为redis，并返回key1的旧值(old value)</span></span><br><span class=\"line\"><span class=\"string\">\"hello redis\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">\"redis\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; del key1 <span class=\"comment\"># 删除 key1</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"整数自增自减操作命令\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#整数自增自减操作命令\"></a> 整数自增自减操作命令<a href=\"2018/10/05/learn-redis-2#整数自增自减操作命令\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key2 10 <span class=\"comment\"># 存入一个值为10的整数字符串</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incr key2 <span class=\"comment\"># 自增</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; incr key2 <span class=\"comment\"># 自增</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 12</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby key2 5 <span class=\"comment\"># 自增指定数值 -- 5</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br><span class=\"line\">127.0.0.1:6379&gt; decr key2 <span class=\"comment\"># 自减</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 16</span><br><span class=\"line\">127.0.0.1:6379&gt; decr key2 <span class=\"comment\"># 自减</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br><span class=\"line\">127.0.0.1:6379&gt;  decrby key2 5 <span class=\"comment\"># 自减指定数值 -- 5</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"其他命令\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#其他命令\"></a> 其他命令<a href=\"2018/10/05/learn-redis-2#其他命令\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 redis</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; append key1 hello <span class=\"comment\"># 将 hello 追加到 key1 原来的值的末尾,放回追加后字符串长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">\"redishello\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; strlen key1 <span class=\"comment\"># 返回 key1 所储存的字符串值的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; mset key1 v1 key2 v2 key3 v3 <span class=\"comment\"># 批量同时设置一个或多个 key-value 对</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget key1 key2 key3 <span class=\"comment\"># 返回所有(一个或多个)给定 key 的值</span></span><br><span class=\"line\">1) <span class=\"string\">\"v1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"v2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"v3\"</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#应用场景\"></a> 应用场景<a href=\"2018/10/05/learn-redis-2#应用场景\"></a></h4>\n<ul>\n<li>商品编号，订单号采用string 的递增数字特性生成</li>\n</ul>\n<h2 id=\"散列类型hash\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#散列类型hash\"></a> 散列类型（Hash）<a href=\"2018/10/05/learn-redis-2#散列类型hash\"></a></h2>\n<h4 id=\"redis-hash介绍\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-hash介绍\"></a> redis hash介绍<a href=\"2018/10/05/learn-redis-2#redis-hash介绍\"></a></h4>\n<p>hash 叫散列类型。等价于Java 中的 HashMap。但是在 redis 中 hash 的 key 必须是 string 类型。不支持其他类型。这个特性非常适合存储对象。因为一个对象可以有很多属性，存储起来就是键值对形式的。在 Reids 中，每个 Hash 可以存储多达 4 亿个键值对。</p>\n<p><img src=\"/2018/10/05/learn-redis-2/hash.png\" alt=\"图示\" class=\"article-img\"></p>\n<h4 id=\"相关操作命令\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#相关操作命令\"></a> 相关操作命令<a href=\"2018/10/05/learn-redis-2#相关操作命令\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user name zhangsan <span class=\"comment\"># 使用 hset 为 user 添加一个键值对 name = zhangsan</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hset user age 18 <span class=\"comment\"># 使用 hset 为 user 添加一个键值对 age = 18</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget user name <span class=\"comment\"># 使用 hget 获取 user 中键为 name 的值</span></span><br><span class=\"line\"><span class=\"string\">\"zhangsan\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hget user age <span class=\"comment\"># 使用 hget 获取 user 中键为 age 的值</span></span><br><span class=\"line\"><span class=\"string\">\"18\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user <span class=\"comment\"># 使用 hgetall 获取 user 中所有的键值对</span></span><br><span class=\"line\">1) <span class=\"string\">\"name\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"zhangsan\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"age\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"18\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset user name lisi age 20 <span class=\"comment\"># 使用 hmset 为 user 批量添加键值对</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user name age <span class=\"comment\"># 使用 hmget 批量获取 user 中键的值</span></span><br><span class=\"line\">1) <span class=\"string\">\"lisi\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"20\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hdel user name<span class=\"comment\"># 使用 hdel 删除 user 一个（或多个）键值对</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user name <span class=\"comment\"># 使用 hexists 判断 user 中 name 元素是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists user age <span class=\"comment\"># 使用 hexists  user 中 age 元素是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys user <span class=\"comment\"># 使用 hkeys 只获得 user 中的字段名</span></span><br><span class=\"line\">1) <span class=\"string\">\"age\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user <span class=\"comment\"># 使用 hvals 只获得 user 中的字段值</span></span><br><span class=\"line\">1) <span class=\"string\">\"20\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hlen user <span class=\"comment\"># 使用 hlen 获得  user 中字段（键值对）数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"其他特性\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#其他特性\"></a> 其他特性<a href=\"2018/10/05/learn-redis-2#其他特性\"></a></h4>\n<p>Redis 中的 Hash 结构有<code>扩容</code>和<code>缩容</code>特性，扩容主要应用在当 hash 内部比较拥挤的时候，容易产生 hash 碰撞，这时需要扩容 hash 。申请新的两倍大小的数组；而缩容与扩容恰恰相反，虽然原理一样，但是申请的新数组要比旧的小一倍。</p>\n<h4 id=\"应用场景-2\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#应用场景-2\"></a> 应用场景<a href=\"2018/10/05/learn-redis-2#应用场景-2\"></a></h4>\n<ul>\n<li>保存大量的对象数据</li>\n</ul>\n<h2 id=\"列表类型list\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#列表类型list\"></a> 列表类型（List)<a href=\"2018/10/05/learn-redis-2#列表类型list\"></a></h2>\n<h4 id=\"redis-list介绍\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-list介绍\"></a> redis list介绍<a href=\"2018/10/05/learn-redis-2#redis-list介绍\"></a></h4>\n<p>在 java 中，列表类型有两种，一种是 ArrayList，实现方式是<code>数组</code>，所以根据索引查询数据速度快，而插入或者删除某个元素涉及到位移操作，会比较慢；另一种是 LinkedList，实现方式是<code>双向链表（double linked list）</code>，每个元素都记录着前后元素的指针。所以在插入或删除某个元素时只需要更改该元素的前后指针指向就行，非常快，但是在查询上需要从头索引，特别是当数据量大的时候，索引起来还是比较慢的。</p>\n<p>在 Redis 中的 List 类型，其内部使用的是<code>双向链表</code>实现的,所以它具有双向链表具有的相关特性。其常用操作就是向列表两端添加或删除元素。这使得 List 既可以当做<code>栈（先进后出）</code>来使用，也可以当做<code>队列（先进先出）</code>来使用。</p>\n<h4 id=\"相关操作命令-2\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#相关操作命令-2\"></a> 相关操作命令<a href=\"2018/10/05/learn-redis-2#相关操作命令-2\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush list 1 2 3 4 <span class=\"comment\"># 使用 lpush 将 1 2 3 4 依次插入到 list 的左端</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; rpush list 5 6 7 8 <span class=\"comment\"># 使用 rpush 将 5 6 7 8 依次插入到 list 的右端</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1 <span class=\"comment\"># 使用 lrange 获取 指定区间上所有值（0 -1 表示获取全部）</span></span><br><span class=\"line\">1) <span class=\"string\">\"4\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">7) <span class=\"string\">\"7\"</span></span><br><span class=\"line\">8) <span class=\"string\">\"8\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpop list <span class=\"comment\"># 使用 lpop 弹出 list 左端的一个值，并返回弹出的值</span></span><br><span class=\"line\"><span class=\"string\">\"4\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpop list </span><br><span class=\"line\"><span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop list <span class=\"comment\"># 使用 rpop 弹出 list 右端的一个值，并返回弹出的值</span></span><br><span class=\"line\"><span class=\"string\">\"8\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop list</span><br><span class=\"line\"><span class=\"string\">\"7\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; llen list <span class=\"comment\"># 使用 llen 获取 list 中元素个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"应用场景-3\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#应用场景-3\"></a> 应用场景<a href=\"2018/10/05/learn-redis-2#应用场景-3\"></a></h4>\n<ul>\n<li>商品，博客，文章下面的评论列表。</li>\n</ul>\n<h2 id=\"集合类型set\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#集合类型set\"></a> 集合类型（Set）<a href=\"2018/10/05/learn-redis-2#集合类型set\"></a></h2>\n<h4 id=\"redis-set-介绍\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-set-介绍\"></a> redis set 介绍<a href=\"2018/10/05/learn-redis-2#redis-set-介绍\"></a></h4>\n<p>redis 中的 set 类型和 java 中的 HashSet 类似，其底层都是用HashMap 实现的，只不过所有的 value 都指向同一个对象。在 set 中，没有重复的元素。并且没有顺序。其常用的操作就是向集合中加入或删除一个元素、判断某个元素是否在集合中。另外 redis 还提供了多个集合之间的 交集、并集、差集的运算。</p>\n<h4 id=\"相关操作命令-3\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#相关操作命令-3\"></a> 相关操作命令<a href=\"2018/10/05/learn-redis-2#相关操作命令-3\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd <span class=\"built_in\">set</span> a b c 1 2 3  <span class=\"comment\"># 使用 sadd 将 a b c 1 2 3 添加到 set 集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd <span class=\"built_in\">set</span> a b 2  <span class=\"comment\"># 添加重复元素，返回成功添加 0 个，说明 set 中元素不重复</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; srem <span class=\"built_in\">set</span> a b 1  <span class=\"comment\"># 使用 srem 删除 set 集合中的 a b 1 三个元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers <span class=\"built_in\">set</span>  <span class=\"comment\"># 使用 smembers 获取 set 集合中所以元素</span></span><br><span class=\"line\">1) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"c\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sismember <span class=\"built_in\">set</span> a  <span class=\"comment\"># 使用 sismember 判断 a 是否在 set 集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember <span class=\"built_in\">set</span> c  <span class=\"comment\"># 使用 sismember 判断 c 是否在 set 集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"集合间的相关运算\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#集合间的相关运算\"></a> 集合间的相关运算<a href=\"2018/10/05/learn-redis-2#集合间的相关运算\"></a></h4>\n<h5 id=\"集合的并集运算-a-b\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#集合的并集运算-a-b\"></a> 集合的并集运算 A ∪ B<a href=\"2018/10/05/learn-redis-2#集合的并集运算-a-b\"></a></h5>\n<p><img src=\"/2018/10/05/learn-redis-2/buji.png\" alt=\"并集\" class=\"article-img\"></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion seta setb <span class=\"comment\"># 使用 sunion 计算 seta 和 setb 的并集</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"4\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"5\"</span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"集合的交集运算-a-b\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#集合的交集运算-a-b\"></a> 集合的交集运算 A ∩ B<a href=\"2018/10/05/learn-redis-2#集合的交集运算-a-b\"></a></h5>\n<p><img src=\"/2018/10/05/learn-redis-2/jiaoji.png\" alt=\"交集\" class=\"article-img\"></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter seta setb <span class=\"comment\"># 使用 sinter 计算 seta 和 setb 的交集</span></span><br><span class=\"line\">1) <span class=\"string\">\"3\"</span></span><br></pre></td></tr></table></div></figure>\n<h5 id=\"集合的差集运算-a-b\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#集合的差集运算-a-b\"></a> 集合的差集运算 A - B<a href=\"2018/10/05/learn-redis-2#集合的差集运算-a-b\"></a></h5>\n<p><img src=\"/2018/10/05/learn-redis-2/caji.png\" alt=\"差集\" class=\"article-img\"></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd seta 1 2 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd setb 3 4 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff seta setb <span class=\"comment\"># 使用 sdiff 计算 seta - setb (属于seta 但不属于 setb)</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff setb seta <span class=\"comment\"># 使用 sdiff 计算 setb - setb (属于setb 但不属于 seta)</span></span><br><span class=\"line\">1) <span class=\"string\">\"4\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"5\"</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"有序集合类型-sorted-set\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#有序集合类型-sorted-set\"></a> 有序集合类型 (sorted set)<a href=\"2018/10/05/learn-redis-2#有序集合类型-sorted-set\"></a></h2>\n<h4 id=\"redis-sorted-set介绍\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#redis-sorted-set介绍\"></a> redis sorted set介绍<a href=\"2018/10/05/learn-redis-2#redis-sorted-set介绍\"></a></h4>\n<p><code>SortedSet(zset)</code>是 redis 提供的一个非常特别的数据结构，它在集合的基础上为每一个元素都关联了一个分数，这相当于 java 中的 <code>Map&lt;String,Double&gt;</code>，可以给每一个元素赋予一个<code>score</code>权重。另一方面又像<code>TreeSet</code>，内部的元素会按照权重<code>score</code>进行排序。</p>\n<h4 id=\"相关操作命令-4\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#相关操作命令-4\"></a> 相关操作命令<a href=\"2018/10/05/learn-redis-2#相关操作命令-4\"></a></h4>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd board 81 java 75 python 90 c++ <span class=\"comment\"># 使用 zadd 增加一到多个value/score对，score 放在前面</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zscore board java <span class=\"comment\"># 使用 zscore 获取 java 的 score</span></span><br><span class=\"line\"><span class=\"string\">\"81\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange board 0 -1 <span class=\"comment\"># 使用 zrange 获取指定区间（0 -1 表示全部）上的降序排名</span></span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"c++\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrange board 0 -1 withscores <span class=\"comment\"># 带上 winthscores 可以一并获取元素的 score</span></span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span> </span><br><span class=\"line\">2) <span class=\"string\">\"75\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"81\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"c++\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"90\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrevrange board 0 -1 withscores <span class=\"comment\"># 使用 zrevrange 获取指定区间（0 -1 表示全部）上的升序排名</span></span><br><span class=\"line\">1) <span class=\"string\">\"c++\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"90\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"81\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"75\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore board -inf +inf withscores <span class=\"comment\"># 使用 zrangebyscore 获取 负无穷（-inf）到 正无穷（+inf）区间上所以元素的降序排名</span></span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"75\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"81\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"c++\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"90\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrevrangebyscore board +inf -inf withscores <span class=\"comment\"># 使用 zrevrangebyscore 获取正无穷（+inf）到 负无穷（-inf）区间上所以元素的升序排名 </span></span><br><span class=\"line\">1) <span class=\"string\">\"c++\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"90\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"81\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"75\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zcard board <span class=\"comment\"># 使用 zcard 计算 board 集合的元素个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zrem board java python <span class=\"comment\"># 使用 zrem 删除 board 集合中的一个或多个元素 </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></div></figure>\n<h4 id=\"应用场景-4\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#应用场景-4\"></a> 应用场景<a href=\"2018/10/05/learn-redis-2#应用场景-4\"></a></h4>\n<ul>\n<li>商品销售，软件下载等各种排行榜</li>\n</ul>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"2018/10/05/learn-redis-2#参考\"></a> 参考<a href=\"2018/10/05/learn-redis-2#参考\"></a></h2>\n<ul>\n<li>\n<p><a href=\"https://juejin.im/post/5b53ee7e5188251aaa2d2e16\" target=\"_blank\" rel=\"noopener\">通俗易懂的Redis数据结构基础教程</a></p>\n</li>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000008645186\" target=\"_blank\" rel=\"noopener\">[Redis基础：基本介绍、redis的应用场景、五种数据类型、持久化操作、主从模式]</a></p>\n</li>\n<li>\n<p><a href=\"http://doc.redisfans.com/\" target=\"_blank\" rel=\"noopener\">Redis 命令参考</a></p>\n</li>\n</ul>\n","prev":{"title":"JDBC连接Mysql数据库出现的问题汇总","link":"2018/10/10/java-connect-mysql-error"},"next":{"title":"Redis系列(一):Redis的简介与安装","link":"2018/10/04/learn-redis-1"},"plink":"https://dmego.me/2018/10/05/learn-redis-2/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> Redis 中常用命令","id":"redis-中常用命令","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> Redis数据类型简介","id":"redis数据类型简介","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 字符串类型（String）","id":"字符串类型string","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 散列类型（Hash）","id":"散列类型hash","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 列表类型（List)","id":"列表类型list","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 集合类型（Set）","id":"集合类型set","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 有序集合类型 (sorted set)","id":"有序集合类型-sorted-set","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> 参考","id":"参考","index":"8"}],"copyright":{"link":"<a href=\"https://dmego.me/2018/10/05/learn-redis-2/\" title=\"Redis系列(二):Redis的数据类型及命令操作\">https://dmego.me/2018/10/05/learn-redis-2/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}