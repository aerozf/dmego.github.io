{"title":"Git学习笔记","date":"2017-08-26T10:36:00.000Z","author":"Dmego","thumbnail":"2017/08/26/learn-git/2017-08-27_035118.jpg","color":"#111","link":"2017/08/26/learn-git","comments":true,"tags":["Git"],"categories":["技术"],"updated":"2019-12-22T18:21:32.529Z","content":"<a id=\"more\"></a>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#前言\"></a> 前言<a href=\"2017/08/26/learn-git#前言\"></a></h2>\n<ul>\n<li>\n<p>本文档笔记是本人通过学习<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程</a>的整理而来</p>\n</li>\n<li>\n<p>本文档主要记录本人当时在学习过程中认为重要的概念和命令</p>\n</li>\n</ul>\n<h2 id=\"创建一个版本库\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#创建一个版本库\"></a> 创建一个版本库<a href=\"2017/08/26/learn-git#创建一个版本库\"></a></h2>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir learngit //使用命令创建一个目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> learngit //进入这个目录</span><br><span class=\"line\"><span class=\"built_in\">pwd</span> //用于显示当前目录</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"初始化仓库\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#初始化仓库\"></a> 初始化仓库<a href=\"2017/08/26/learn-git#初始化仓库\"></a></h2>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"添加文件到仓库\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#添加文件到仓库\"></a> 添加文件到仓库<a href=\"2017/08/26/learn-git#添加文件到仓库\"></a></h2>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一步：git add &lt;file&gt;</span><br><span class=\"line\">第二步：git commit -m <span class=\"string\">'本次提交的说明'</span></span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status:查看当前Git仓库的状态，是否有文件没有提交，让我们掌握仓库最新的状态</span><br><span class=\"line\">git diff: 查看不同，当修改文件后，可以查看修改了什么内容（只适用于文本文件）</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/2017/08/26/learn-git/4632163-5faa5c85dd81fd28.jpg\" alt=\"img\" class=\"article-img\"></p>\n<h2 id=\"实现版本之间回退\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#实现版本之间回退\"></a> 实现版本之间回退<a href=\"2017/08/26/learn-git#实现版本之间回退\"></a></h2>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span>:显示从最近到最远的提交日志</span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline:如果信息太多，使用这行命令</span><br></pre></td></tr></table></div></figure>\n<ol>\n<li>在Git中，用<code>HEAD</code>表示当前版本,上一个版本就是<code>HEAD^</code>，上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</li>\n<li>一大串类似<code>882e1e0...67hko896</code>的是commit id 版本号</li>\n<li><code>git reset --hard HEAD^</code>: 回退到上一个版本此时，当再次使用<code>git log</code>命令时，发现之前的版本已经消失了，此时想要再次回到那个版本，有两种方式：一种是当命令窗口没有关闭时，找到那个版本的版本号，如：<code>81ac3c5</code>，此时又回到最新的那个版本的命令是：</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 81ac3c5</span><br></pre></td></tr></table></div></figure>\n<p>如果已经过去很久了，已经记不得想要回退的版本的ID号，此时可以依据这个命令来找回版本号：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/2017/08/26/learn-git/4632163-0473a545930db837.png\" alt class=\"article-img\"></p>\n<h2 id=\"工作区与暂存区的概念\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#工作区与暂存区的概念\"></a> 工作区与暂存区的概念<a href=\"2017/08/26/learn-git#工作区与暂存区的概念\"></a></h2>\n<ol>\n<li>\n<p>工作区（Working Directory）：就是能在电脑上看到的目录，比如仓库文件夹</p>\n</li>\n<li>\n<p>版本库（Repository）：工作区里有一个隐藏目录<code>.git</code> ，这个不算工作区，而是git的版本库前面我们讲了往Git版本库里添加文件的时候，分两步，这两步更详细的说是：</p>\n</li>\n</ol>\n<ul>\n<li>第一步使用<code>git add</code> 把文件添加进去，实际上就是把文件修改添加到暂存区；</li>\n<li>第二步使用<code>git commit</code>提交修改，实际上是把暂存区的所有内容提交到当前分支因为我们创建Git版本库的时候，Git自动为我们创建了唯一的一个<code>master</code> 分支，而<code>git commit</code>就是往 <code>master</code>分支上提交更改。也可以简单理解为需要提交的文件修改通通放到了暂存区，等到要提交的时候，一次性提交暂存区里所有的文件到分支。</li>\n</ul>\n<p><strong>注意点</strong>：</p>\n<blockquote>\n<p><code>git diff</code> 是工作区与暂存区的对比<br>\n<code>git diff -- cached</code> 是暂存区与分支的对比<br>\n<code>git diff HEAD -- &lt;file&gt;</code> 是工作区与分支的对比</p>\n</blockquote>\n<h2 id=\"撤销修改\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#撤销修改\"></a> 撤销修改<a href=\"2017/08/26/learn-git#撤销修改\"></a></h2>\n<p><em>在以下三种情况下可以撤销修改：</em></p>\n<ol>\n<li>修改了文件，没有添加到暂存区（修改了工作区）<code>git checkout -- &lt;file&gt;</code></li>\n<li>修改文件后添加到了暂存区，但是没有提交到分支（修改了暂存区）<code>git reset HEAD &lt;file&gt;</code>  //把暂存区的修改回退到工作区<code>git checkout -- &lt;file&gt;</code>//把工作区的修改撤销</li>\n<li>已经提交到了本地仓库分支，没有同步到远程仓库（版本回退即可）<code>git reset --hard HEAD^</code></li>\n</ol>\n<h2 id=\"删除文件以及恢复文件\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#删除文件以及恢复文件\"></a> 删除文件以及恢复文件<a href=\"2017/08/26/learn-git#删除文件以及恢复文件\"></a></h2>\n<p>当我们使用 <code>rm</code> 命令或者直接在图形界面删除文件后，只是修改了工作区，若先使用 <code>git rm &lt;file&gt;</code> 命令删除文件，此时不仅修改了工作区，还修改了暂存区，此时使用撤销修改的命令还能找回被删除的文件。当删除操作被提交到分支后，只能使用版本回退操作来找回删除的文件。</p>\n<p><strong>注</strong>：<code>git rm &lt;file&gt;</code> 命令相当于先执行了<code>rm</code>命令 ，然后把工作区的修改添加到了暂存区，也就是说使用<code>git rm &lt;file&gt;</code>命令后不仅工作区的文件被删除了，也把删除操作添加到了暂存区。这就告诉我们，要想快速删除文件并提交到分支，只需执行<code>git rm &lt;file&gt;</code> 命令后<code>commit</code>就行了，如果想要更加谨慎，可以先使用<code>rm</code> 命令删除工作区中的文件，此时若想要撤销删除可以使用<code>git checkout -- &lt;file&gt;</code> 命令；如果想要添加修改操作到暂存区，使用<code>git rm &lt;file&gt;</code> 命令，到了这一步如果想要撤销删除可以先使用<code>git reset HEAD &lt;file&gt;</code> 命令撤销对暂存区的修改，然后使用 <code>git checkout -- &lt;file&gt;</code>命令来撤销对工作区的修改；如果已经把修改操作提交到了分支，此时想要撤销删除，找回文件则只能使用版本回退操作，即使用<code>git reset --hard HEAD^</code>命令。</p>\n<h2 id=\"添加远程库并保持同步\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#添加远程库并保持同步\"></a> 添加远程库，并保持同步<a href=\"2017/08/26/learn-git#添加远程库并保持同步\"></a></h2>\n<ol>\n<li>当我们的系统之前从未使用SSH进行加密传输操作时，我们应该首先在用户主目录下创建SSH Key，因为你的本地Git 仓库和GitHub 仓库之间的传输是通过SSH 加密的。<br>\n<img src=\"/2017/08/26/learn-git/4632163-1a70baf9a3d42d1a.png\"></li>\n<li>在Github 上创建一个和本地仓库同名的仓库，要让本地仓库与该远程仓库关联可以使用命令：</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@server-name:path/repo-name.git</span><br></pre></td></tr></table></div></figure>\n<ol start=\"3\">\n<li>关联后，使用命令<code>git push -u origin master</code>第一次推送<code>master</code> 分支的所有内容</li>\n</ol>\n<p>例如：<br>\n<img src=\"/2017/08/26/learn-git/f6f278e2-fda1-4021-885b-4a7ef7c9a776.png\" alt=\"推送master分支的所有内容\"></p>\n<ol start=\"4\">\n<li>此后，每次本地提交后，要想实现远程仓库的同步，只需使用命令<code>git push origin master</code>推送最新的修改</li>\n</ol>\n<h2 id=\"从远程仓库克隆\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#从远程仓库克隆\"></a> 从远程仓库克隆<a href=\"2017/08/26/learn-git#从远程仓库克隆\"></a></h2>\n<p>在合适的目录下使用命令</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@server-name:path/repo-name.git</span><br></pre></td></tr></table></div></figure>\n<p>例如:<br>\n<img src=\"/2017/08/26/learn-git/533ef804-c1e6-4252-bd52-af787ccfa4a3.png\" alt=\"从远程仓库克隆\"></p>\n<h2 id=\"创建与合并分支\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#创建与合并分支\"></a> 创建与合并分支<a href=\"2017/08/26/learn-git#创建与合并分支\"></a></h2>\n<ol>\n<li>创建一个名为<code>dev</code>的分支</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br></pre></td></tr></table></div></figure>\n<ol start=\"2\">\n<li>切换到<code>dev</code>分支</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout dev</span><br></pre></td></tr></table></div></figure>\n<ol start=\"3\">\n<li>以上两步可以用一条下面的命令完成</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev //加上-b 参数表示创建并切</span><br></pre></td></tr></table></div></figure>\n<ol start=\"4\">\n<li>查看分支情况</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch //这个命令会列出所有的分支，并且在当前分支上会标注星号*</span><br></pre></td></tr></table></div></figure>\n<ol start=\"5\">\n<li>把<code>dev</code>分支的工作合并分支<code>master</code>上</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master //首先切换到master分支git merge dev //合并指定分支（dev）到当前分支（master）</span><br></pre></td></tr></table></div></figure>\n<ol start=\"6\">\n<li>删除分支</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d dev //删除分支 dev</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/2017/08/26/learn-git/4632163-07512ebdf2fb68f8.png\" alt=\"img\" class=\"article-img\"></p>\n<h2 id=\"分支合并时冲突解决\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#分支合并时冲突解决\"></a> 分支合并时冲突解决<a href=\"2017/08/26/learn-git#分支合并时冲突解决\"></a></h2>\n<p>当我们在两个分支上对同一个文件进行修改，并且修改的内容不一样，此时合并这两个分支时就会产生冲突<br>\n<img src=\"/2017/08/26/learn-git/a432bb77-8466-442e-99cd-859ba52730ee.png\" alt=\"产生冲突\"><br>\n此时查看该修改的文件时，就会发现Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，此时我们需要手动修改文件，删除Git的标记，然后将修改后的文件先添加到暂存区，然后提交到分支<br>\n<img src=\"/2017/08/26/learn-git/ccdf2ba4-ce17-4c54-b347-63ec55776dc7.png\" alt=\"解决冲突\"><br>\n提交成功后使用命令：<code>git log --graph --pretty=oneline --abbrev-commit</code>可以看到分支合并图</p>\n<h2 id=\"分支管理策略\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#分支管理策略\"></a> 分支管理策略<a href=\"2017/08/26/learn-git#分支管理策略\"></a></h2>\n<p>通常，合并分支的时候，Git会使用<code>Fast forward</code>模式，当是在这种模式下删除分支后就会丢掉分支的信息，如果我们想要在删除分支后还想在分支历史上看到分支的信息就可以强制禁用<code>Fast forward</code> 模式，此时Git 会在合并分支时生成一个新的<code>commit</code>：强制禁用<code>Fast forward</code> 模式的命令：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m <span class=\"string\">'merge with no-ff'</span> dev //因为本次合并会生成一个commit ，所以需要加上 -m 参数说明</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/2017/08/26/learn-git/4632163-58566aa88623b38b.png\" alt=\"img\" class=\"article-img\"></p>\n<h2 id=\"保存现场修复bug后恢复\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#保存现场修复bug后恢复\"></a> 保存现场，修复bug后恢复<a href=\"2017/08/26/learn-git#保存现场修复bug后恢复\"></a></h2>\n<p>我们在开发过程中需要经常修复软件中发现的bug，在git中我们就可以通过创建一个临时的分支来修复bug，修复bug后合并分支，然后删除临时分支<br>\n但是如果我们在<code>dev</code>分支上的内容还没提交怎么办，此时我们可以使用命令来保存现场：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></div></figure>\n<p>此时再查看Git库的状态就是干净的。当我们在<code>master</code>分支上通过创建临时分支修复bug后，再<code>checkout</code> 回<code>dev</code>分支时，我们有两条命令都可以恢复修复bug之前<code>dev</code>分支的状态：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）git stash apply // 恢复工作现场，但是不删除现场，就是说以后还可以恢复到该状态</span><br><span class=\"line\">（2）git stash pop // 恢复工作现场后删除stash的内容</span><br></pre></td></tr></table></div></figure>\n<p>我们可以使用命令<code>git stash list</code> 来查看有多少现场被保存了，我们也可以多次使用<code>stash</code>，恢复的时候，通过 <code>list</code>后查看<code>stash</code> 的值， 然后通过恢复现场的命令来选择回到具体哪一个现场，如：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) git stash apply stash@&#123;1&#125;  //恢复到 stash@&#123;1&#125; 后不删除该现场</span><br><span class=\"line\">(2) git stash pop stash@&#123;0&#125; //恢复到 stash@&#123;0&#125; 后删除该现场</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"强行删除没有完全合并的分支\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#强行删除没有完全合并的分支\"></a> 强行删除没有完全合并的分支<a href=\"2017/08/26/learn-git#强行删除没有完全合并的分支\"></a></h2>\n<p>当我们要添加一个新功能时我们会新建一个分支来进行添加，等到要合并新功能的分支到主分支时，接到通知说该新功能不需要了，此时如果我们删除该新功能分支会提示我们该新功能分支没有完全合并，如果确认要删除它，执行：<code>git branch -D &lt;分支名称&gt;</code>使用这个命令就可以删除未合并的分支，其实就是将小写 <code>d</code> 换成大写<code>D</code></p>\n<h2 id=\"多人协作开发\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#多人协作开发\"></a> 多人协作开发<a href=\"2017/08/26/learn-git#多人协作开发\"></a></h2>\n<p>我们一般在开发中都是多人协作开发项目的,当你<code>clone</code>你的另一名小伙伴的项目库到你电脑上后，默认你只能看到该项目的本地<code>master</code>分支，你如果想要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地来，使用的命令是：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b dev origin/dev</span><br></pre></td></tr></table></div></figure>\n<p>这样你就可以继续在<code>dev</code>上修改，修改完之后还可以 <code>push dev</code>分支到远程库，但是如果你的小伙伴也<code>push</code>了一次到远程库，并且此时你和你的小伙伴都对同样的文件进行了修改，你现在试图推送该分支到远程库，结果出现<br>\n<img src=\"/2017/08/26/learn-git/32e277ac-2e9b-4a17-bd62-d793ba27944d.png\" alt=\"推送失败\"><br>\n推送失败，因为你的提交与你小伙伴的最新提交之间有冲突。此时根据提示我们先用<code>git pull</code>把最新的提交从 <code>origin/dev</code>抓取下来，然后在本地合并解决冲突后然后提交分支并且推送<code>dev</code>到远程库。有的时候，我们<code>git pull</code>也会失败，原因是因为没有指定本地 <code>dev</code> 分支与远程<code>origin/dev</code> 分支的链接。我们根据提示，设置链接<br>\n设置的命令如提示:</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to=origin/dev</span><br></pre></td></tr></table></div></figure>\n<p>此时就可以<code>git pull</code> 了，但是在本地合并时还会有冲突，此时我们通过手动解决冲突后然后推送到远程库。<br>\n<img src=\"/2017/08/26/learn-git/4632163-586cd65342210d70.png\" alt=\"img\"></p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>查看远程库的信息，使用命令<code>git remote -v</code></li>\n<li>本地新建的分支如果不推送到远程对其他人是不可见的</li>\n<li>在本地创建和远程分支对应的分支使用<code>git checkout -b branch-name origin/branch-name</code> 本地和远程分支的名称最好一致</li>\n</ul>\n<h2 id=\"创建和操作标签\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#创建和操作标签\"></a> 创建和操作标签<a href=\"2017/08/26/learn-git#创建和操作标签\"></a></h2>\n<p>为了更加方便的操作不同的版本，使用<code>commit</code>号（如：<code>fs3k1hgk</code>）是非常不方便的，如果使用版本号如<code>v 1.2</code>等标号就能很快的确认一个版本.<br>\n标签：<code>tag</code>就是一个让人容易记住的有意义的名字，它跟某一个<code>commit</code> 绑在一起。它可以类似的理解为 IP 与域名的关系.</p>\n<ol>\n<li>使用如下命令用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code></li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;tagname&gt;</span><br><span class=\"line\">如：git tag v1.0</span><br><span class=\"line\">git tag &lt;tagname&gt; &lt;commit id&gt;</span><br><span class=\"line\">如：git tag v1.0 ew326gd | git tag v 1.0 HEAD@&#123;1&#125;</span><br></pre></td></tr></table></div></figure>\n<p><img src=\"/2017/08/26/learn-git/4632163-2650f50b0aef58bd.png\" alt=\"img\" class=\"article-img\"></p>\n<p><em>注:    标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息</em></p>\n<ol start=\"2\">\n<li>删除一个本地标签<code>git tag -d &lt;tagname&gt;</code></li>\n<li>推送一个本地标签到远程库<code>git push origin &lt;tagname&gt;</code></li>\n<li>推送全部未推送到远程库的标签到远程库<code>git push origin --tags</code></li>\n<li>删除一个已经推送到远程库的标签</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d &lt;tagname&gt; //先删除本地标签</span><br><span class=\"line\">git push origin:refs/tags/&lt;tagname&gt; // 再删除远程标签</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"一个本地库关联多个远程库\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#一个本地库关联多个远程库\"></a> 一个本地库关联多个远程库<a href=\"2017/08/26/learn-git#一个本地库关联多个远程库\"></a></h2>\n<p>由于git本身是分布式版本控制系统，可以同步多个不同的远程库。例如可以同时同步到GitHUb和码云，但是我们在使用多个远程库时要注意，因为git给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们就需要使用不同的名称来标识不同的远程库。<br>\n一般关联多个远程库分为下面几个步骤：</p>\n<ol>\n<li>如果之前关联过一个远程库，且远程库的名称是默认的<code>origin</code>，此时你可以继续保留这个库或者先删除这个库，然后再关联并且起一个更加有辨识度的名称</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm origin //删除已经关联的名为origin 的远程库</span><br></pre></td></tr></table></div></figure>\n<ol start=\"2\">\n<li>接着再关联如GitHub上的远程库，并将远程库的名称叫做 GitHub,不使用默认的名称</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:dmego/learngit.git</span><br></pre></td></tr></table></div></figure>\n<ol start=\"3\">\n<li>然后再关联一个远程仓库，如码云上的远程库，并将远程库的名称叫做gitee</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add gitee git@gitee.com:dmocgo/learngit.git</span><br></pre></td></tr></table></div></figure>\n<ol start=\"4\">\n<li>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br><span class=\"line\">gitee git@gitee.com:dmocgo/learngit.git (fetch)</span><br><span class=\"line\">gitee git@gitee.com:dmocgo/learngit.git (push)</span><br><span class=\"line\">github git@github.com:dmego/learngit.git (fetch)</span><br><span class=\"line\">github git@github.com:dmego/learngit.git (push)</span><br></pre></td></tr></table></div></figure>\n<ol start=\"5\">\n<li>如果要推送到GitHub，使用命令：</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push github master</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6. 如果要推送到码云，使用命令：</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push gitee master</span><br></pre></td></tr></table></div></figure>\n<p>这样一来，我们的本地库就可以同时与多个远程库同步<br>\n<img src=\"/2017/08/26/learn-git/m.jpg\" alt=\"同时与多个远程库同步\"></p>\n<h2 id=\"自定义git\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#自定义git\"></a> 自定义Git<a href=\"2017/08/26/learn-git#自定义git\"></a></h2>\n<ol>\n<li>让Git命令显示颜色，输出更加醒目：</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></div></figure>\n<ol start=\"2\">\n<li>忽略特殊的文件，其中忽略文件的原则是：</li>\n</ol>\n<blockquote>\n<p>忽略操作系统自动生成的文件，如缩略图<br>\n忽略编译生成的中间文件，可执行文件，也就是说一个文件时通过其他文件自动生成的就没有必要放进版本库了，例如java编译产生的<code>.class</code> 文件<br>\n忽略带有敏感信息的配置文件，比如保存了数据库密码的配置文件</p>\n</blockquote>\n<p>我们在Git工作区的根目录下创建一个特殊的 <code>.gitignore</code>文件，然后把要忽略的文件名写进去，Git就会每次在提交的时候自动忽略这些文件，我们不需要从头写一个<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，所有的配置文件都可以在线浏览：<a href=\"https://github.com/github/gitignore%E3%80%82\" target=\"_blank\" rel=\"noopener\">https://github.com/github/gitignore。</a><br>\n有的时候，你想添加一个文件到git ，但是却发现添加不了，原因可能是这个文件被忽略了，如果想强制添加可以使用命令：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -f &lt;filename&gt;</span><br></pre></td></tr></table></div></figure>\n<p>还有的时候发现可能是 <code>.gitignore</code>文件写错了，需要找出来到底哪个规则写错了，可以使用命令检查：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git check-ignore -v &lt;filename&gt;</span><br></pre></td></tr></table></div></figure>\n<ol start=\"3\">\n<li>配置别名，简化命令。有时候命令太长或者单词不好记就可以使用Git来配置别名来达到高效的目的，例如将命令<code>git status</code>简化为<code>git st</code>:</li>\n</ol>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></div></figure>\n<p><strong>注意</strong>：<br>\n<code>--global</code> 参数是全局参数，也就是这些命令在这台电脑的所有Git 仓库下都可以使用（是针对当前用户起作用），如果不加这个参数，就只能对当前仓库起作用。<br>\n每个仓库的配置文件都放在<code>.git/config</code> 文件中，其中别名就在 <code>[alias]</code> 后面，要想删除别名直接把对应的那行删除就行了<br>\n而每个用户的配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中。其中别名就在 <code>[alias]</code>后面，要想删除别名直接把对应的那行删除就行了。</p>\n<h2 id=\"搭建git服务器\"><a class=\"markdownIt-Anchor\" href=\"2017/08/26/learn-git#搭建git服务器\"></a> 搭建Git服务器<a href=\"2017/08/26/learn-git#搭建git服务器\"></a></h2>\n<p>教程地址：<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000\" target=\"_blank\" rel=\"noopener\">廖雪峰GIt教程</a></p>\n","prev":{"title":"使用Travis CI自动部署Hexo到GitHub","link":"2017/10/13/deylpoy-hexo-with-TravisCI"},"next":{"title":"汉诺塔的图解递归算法","link":"2016/10/16/hanoi"},"plink":"https://dmego.me/2017/08/26/learn-git/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 前言","id":"前言","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 创建一个版本库","id":"创建一个版本库","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 初始化仓库","id":"初始化仓库","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 添加文件到仓库","id":"添加文件到仓库","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 实现版本之间回退","id":"实现版本之间回退","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 工作区与暂存区的概念","id":"工作区与暂存区的概念","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 撤销修改","id":"撤销修改","index":"7"},{"title":"<a class=\"markdownIt-Anchor\"></a> 删除文件以及恢复文件","id":"删除文件以及恢复文件","index":"8"},{"title":"<a class=\"markdownIt-Anchor\"></a> 添加远程库，并保持同步","id":"添加远程库并保持同步","index":"9"},{"title":"<a class=\"markdownIt-Anchor\"></a> 从远程仓库克隆","id":"从远程仓库克隆","index":"10"},{"title":"<a class=\"markdownIt-Anchor\"></a> 创建与合并分支","id":"创建与合并分支","index":"11"},{"title":"<a class=\"markdownIt-Anchor\"></a> 分支合并时冲突解决","id":"分支合并时冲突解决","index":"12"},{"title":"<a class=\"markdownIt-Anchor\"></a> 分支管理策略","id":"分支管理策略","index":"13"},{"title":"<a class=\"markdownIt-Anchor\"></a> 保存现场，修复bug后恢复","id":"保存现场修复bug后恢复","index":"14"},{"title":"<a class=\"markdownIt-Anchor\"></a> 强行删除没有完全合并的分支","id":"强行删除没有完全合并的分支","index":"15"},{"title":"<a class=\"markdownIt-Anchor\"></a> 多人协作开发","id":"多人协作开发","index":"16"},{"title":"<a class=\"markdownIt-Anchor\"></a> 创建和操作标签","id":"创建和操作标签","index":"17"},{"title":"<a class=\"markdownIt-Anchor\"></a> 一个本地库关联多个远程库","id":"一个本地库关联多个远程库","index":"18"},{"title":"<a class=\"markdownIt-Anchor\"></a> 自定义Git","id":"自定义git","index":"19"},{"title":"<a class=\"markdownIt-Anchor\"></a> 搭建Git服务器","id":"搭建git服务器","index":"20"}],"copyright":{"link":"<a href=\"https://dmego.me/2017/08/26/learn-git/\" title=\"Git学习笔记\">https://dmego.me/2017/08/26/learn-git/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}