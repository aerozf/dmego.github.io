{"title":"汉诺塔的图解递归算法","date":"2016-10-16T01:56:00.000Z","author":"Dmego","link":"2016/10/16/hanoi","comments":true,"tags":["算法"],"categories":["技术"],"updated":"2019-12-22T18:21:32.529Z","content":"<a id=\"more\"></a>\n<h2 id=\"起源\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#起源\"></a> 起源<a href=\"2016/10/16/hanoi#起源\"></a></h2>\n<p>汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<h2 id=\"抽象为数学问题\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#抽象为数学问题\"></a> 抽象为数学问题<a href=\"2016/10/16/hanoi#抽象为数学问题\"></a></h2>\n<p>如下图所示，从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数<br>\n<img src=\"/2016/10/16/hanoi/1026866-20161016022859889-2055402664.jpg\" alt=\"抽象为数学问题\"></p>\n<p>解:<br>\n(1)  n == 1</p>\n<blockquote>\n<p><strong>第1次  1号盘  A----&gt;C       sum = 1 次</strong></p>\n</blockquote>\n<p>(2)  n == 2</p>\n<blockquote>\n<p>第1次  1号盘  A----&gt;B<br>\n​  <strong>第2次  2号盘  A----&gt;C</strong><br>\n​  第3次  1号盘  B----&gt;C        sum = 3 次</p>\n</blockquote>\n<p>（3）n == 3</p>\n<blockquote>\n<p>第1次  1号盘  A----&gt;C<br>\n​  第2次  2号盘  A----&gt;B<br>\n​  第3次  1号盘  C----&gt;B<br>\n​  <strong>第4次  3号盘  A----&gt;C</strong><br>\n​  第5次  1号盘  B----&gt;A<br>\n​  第6次  2号盘  B----&gt;C<br>\n​  第7次  1号盘  A----&gt;C        sum = 7 次</p>\n</blockquote>\n<p>不难发现规律：</p>\n<blockquote>\n<p>1个圆盘的次数 2的1次方减1<br>\n​  2个圆盘的次数 2的2次方减1<br>\n​  3个圆盘的次数 2的3次方减1<br>\n​   。  。   。    。   。<br>\n​  n个圆盘的次数 2的n次方减1</p>\n</blockquote>\n<p>故：移动次数为：2^n - 1</p>\n<h2 id=\"调用方法的栈机制特点先进后出\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#调用方法的栈机制特点先进后出\"></a> 调用方法的栈机制（特点：先进后出）<a href=\"2016/10/16/hanoi#调用方法的栈机制特点先进后出\"></a></h2>\n<p>从主线程开始调用方法（函数）进行不停的压栈和出栈操作，函数的调用就是将函数压如栈中，函数的结束就是函数出栈的过程，这样就保证了方法调用的顺序流，即当函数出现多层嵌套时，需要从外到内一层层把函数压入栈中，最后栈顶的函数先执行结束（最内层的函数先执行结束）后出栈，再倒数第二层的函数执行结束出栈，到最后，第一个进栈的函数调用结束后从栈中弹出回到主线程，并且结束。</p>\n<h2 id=\"算法分析递归算法\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#算法分析递归算法\"></a> 算法分析（递归算法）<a href=\"2016/10/16/hanoi#算法分析递归算法\"></a></h2>\n<p>我们在利用计算机求汉诺塔问题时，必不可少的一步是对整个实现求解进行算法分析。到目前为止，求解汉诺塔问题最简单的算法还是同过递归来求，至于是什么是递归，递归实现的机制是什么，我们说的简单点就是自己是一个方法或者说是函数，但是在自己这个函数里有调用自己这个函数的语句，而这个调用怎么才能调用结束呢？，这里还必须有一个结束点，或者具体的说是在调用到某一次后函数能返回一个确定的值，接着倒数第二个就能返回一个确定的值，一直到第一次调用的这个函数能返回一个确定的值。<br>\n实现这个算法可以简单分为三个步骤：</p>\n<blockquote>\n<p>（1）     把n-1个盘子由A 移到 B；<br>\n（2）     把第n个盘子由 A移到 C；<br>\n（3）     把n-1个盘子由B 移到 C；</p>\n</blockquote>\n<p>从这里入手，在加上上面数学问题解法的分析，我们不难发现，移到的步数必定为奇数步：</p>\n<blockquote>\n<p>（1）中间的一步是把最大的一个盘子由A移到C上去；<br>\n（2）中间一步之上可以看成把A上n-1个盘子通过借助辅助塔（C塔）移到了B上，<br>\n（3）中间一步之下可以看成把B上n-1个盘子通过借助辅助塔（A塔）移到了C上；</p>\n</blockquote>\n<h2 id=\"java源代码\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#java源代码\"></a> java源代码<a href=\"2016/10/16/hanoi#java源代码\"></a></h2>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目的：实现汉诺塔问题求解</span></span><br><span class=\"line\"><span class=\"comment\"> * 作者：Dmego  时间：2016-10-15</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TowersOfHanoi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> m =<span class=\"number\">0</span>;<span class=\"comment\">//标记移动次数</span></span><br><span class=\"line\">    <span class=\"comment\">//实现移动的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> disks,<span class=\"keyword\">char</span> N,<span class=\"keyword\">char</span> M)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第\"</span> + (++m) +<span class=\"string\">\" 次移动 : \"</span> +<span class=\"string\">\" 把 \"</span>+ disks+<span class=\"string\">\" 号圆盘从 \"</span> + N +<span class=\"string\">\" -&gt;移到-&gt;  \"</span> + M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//递归实现汉诺塔的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hanoi</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> A,<span class=\"keyword\">char</span> B,<span class=\"keyword\">char</span> C)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)<span class=\"comment\">//圆盘只有一个时，只需将其从A塔移到C塔</span></span><br><span class=\"line\">            TowersOfHanoi.move(<span class=\"number\">1</span>, A, C);<span class=\"comment\">//将编b号为1的圆盘从A移到C</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;<span class=\"comment\">//否则</span></span><br><span class=\"line\">            hanoi(n - <span class=\"number\">1</span>, A, C, B);<span class=\"comment\">//递归，把A塔上编号1~n-1的圆盘移到B上，以C为辅助塔</span></span><br><span class=\"line\">            TowersOfHanoi.move(n, A, C);<span class=\"comment\">//把A塔上编号为n的圆盘移到C上</span></span><br><span class=\"line\">            hanoi(n - <span class=\"number\">1</span>, B, A, C);<span class=\"comment\">//递归，把B塔上编号1~n-1的圆盘移到C上，以A为辅助塔</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner imput = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> A = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> B = <span class=\"string\">'B'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> C = <span class=\"string\">'C'</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"******************************************************************************************\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是汉诺塔问题（把A塔上编号从小号到大号的圆盘从A塔通过B辅助塔移动到C塔上去\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"******************************************************************************************\"</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入圆盘的个数：\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> disks = imput.nextInt();</span><br><span class=\"line\">        TowersOfHanoi.hanoi(disks, A, B, C);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"&gt;&gt;移动了\"</span> + m + <span class=\"string\">\"次，把A上的圆盘都移动到了C上\"</span>);</span><br><span class=\"line\">        imput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"图解程序运行流程\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#图解程序运行流程\"></a> 图解程序运行流程<a href=\"2016/10/16/hanoi#图解程序运行流程\"></a></h2>\n<blockquote>\n<p>（1）函数hanoi(int n,char A,char B,char C)的功能是把编号为n的圆盘借助B从A移动到 C上。<br>\n（2）函数move(int n ,char N ,char M)的功能是把1编号为n的圆盘从N 移到M上</p>\n</blockquote>\n<p><img src=\"/2016/10/16/hanoi/1026866-20161016023307592-594782514.png\" alt=\"图解程序运行流程\" class=\"article-img\"></p>\n<h2 id=\"程序运行截图\"><a class=\"markdownIt-Anchor\" href=\"2016/10/16/hanoi#程序运行截图\"></a> 程序运行截图<a href=\"2016/10/16/hanoi#程序运行截图\"></a></h2>\n<p><img src=\"/2016/10/16/hanoi/1026866-20161016023338295-1595920567.png\" alt=\"程序运行截图\" class=\"article-img\"></p>\n","prev":{"title":"Git学习笔记","link":"2017/08/26/learn-git"},"plink":"https://dmego.me/2016/10/16/hanoi/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 起源","id":"起源","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 抽象为数学问题","id":"抽象为数学问题","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 调用方法的栈机制（特点：先进后出）","id":"调用方法的栈机制特点先进后出","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 算法分析（递归算法）","id":"算法分析递归算法","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> java源代码","id":"java源代码","index":"5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 图解程序运行流程","id":"图解程序运行流程","index":"6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 程序运行截图","id":"程序运行截图","index":"7"}],"copyright":{"link":"<a href=\"https://dmego.me/2016/10/16/hanoi/\" title=\"汉诺塔的图解递归算法\">https://dmego.me/2016/10/16/hanoi/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}