{"title":"为什么说java中只有值传递","date":"2018-08-27T17:59:31.000Z","author":"Dmego","link":"2018/08/27/java-only-pass-by-value","comments":true,"tags":["Java"],"categories":["技术"],"updated":"2019-12-22T18:21:32.529Z","content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"2018/08/27/java-only-pass-by-value#前言\"></a> 前言<a href=\"2018/08/27/java-only-pass-by-value#前言\"></a></h2>\n<p>这几天在整理java基础知识方面的内容，对于值传递还不是特别理解，于是查阅了一些资料和网上相关博客，自己进行了归纳总结，最后将其整理成了一篇博客。</p>\n<h2 id=\"值传递\"><a class=\"markdownIt-Anchor\" href=\"2018/08/27/java-only-pass-by-value#值传递\"></a> 值传递<a href=\"2018/08/27/java-only-pass-by-value#值传递\"></a></h2>\n<p><strong>值传递</strong>是指在调用函数时将实际参数<strong>复制</strong>一份传递给形参，这样在函数中对形参的修改将不会影响到实际参数的值。</p>\n<h2 id=\"引用传递\"><a class=\"markdownIt-Anchor\" href=\"2018/08/27/java-only-pass-by-value#引用传递\"></a> 引用传递<a href=\"2018/08/27/java-only-pass-by-value#引用传递\"></a></h2>\n<p><strong>引用传递</strong>是指在调用函数时将实际参数的地址<strong>直接传递</strong>到形参，那么在函数中对参数所进行的修改，将会影响到实际参数的值。</p>\n<p>我们可以使用一段程序来验证<code>Java</code>中只有值传递</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证java中只有值传递</span></span><br><span class=\"line\"><span class=\"comment\"> * Dmego 2018-8-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(User user2,<span class=\"keyword\">int</span> a2)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"改变之前：\"</span>+user2.getName()+<span class=\"string\">\",a2=\"</span>+a2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        user2.setName(<span class=\"string\">\"李四\"</span>); <span class=\"comment\">//改变 user2 的 name 值</span></span><br><span class=\"line\">        a2 = <span class=\"number\">10</span>; <span class=\"comment\">//改变 a2 的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"改变之后：\"</span>+user2.getName()+<span class=\"string\">\",a2=\"</span>+a2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        user2 = <span class=\"keyword\">new</span> User(); <span class=\"comment\">//将 user2 重新指向一个新对象</span></span><br><span class=\"line\">        user2.setName(<span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"重新指向一个新对象后：\"</span>+user2.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user1.setName(<span class=\"string\">\"张三\"</span>); <span class=\"comment\">//初始化 user1 的 name 为张三</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a1 = <span class=\"number\">5</span>; <span class=\"comment\">//初始化 a1 的值为 5</span></span><br><span class=\"line\">        change(user1,a1); <span class=\"comment\">//调用方法验证传值方式</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用方法后：\"</span>+user1.getName()+<span class=\"string\">\",a1=\"</span>+a1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>运行这段程序，输出结果为：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">改变之前：张三,a2=<span class=\"number\">5</span></span><br><span class=\"line\">改变之后：李四,a2=<span class=\"number\">10</span></span><br><span class=\"line\">重新指向一个新对象后：王五</span><br><span class=\"line\">调用方法后：李四,a1=<span class=\"number\">5</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"结果分析\"><a class=\"markdownIt-Anchor\" href=\"2018/08/27/java-only-pass-by-value#结果分析\"></a> 结果分析<a href=\"2018/08/27/java-only-pass-by-value#结果分析\"></a></h2>\n<p><img src=\"/2018/08/27/java-only-pass-by-value/changeValue.png\" alt=\"堆与内存分析\" class=\"article-img\"></p>\n<p>下面我们以上图为辅助，来分析这段程序，首先我们定义了一个<code>User</code>类，然后在测试类中实例化了一个<code>User</code>对象，名为<code>user1</code>，并且为其赋值<code>name = '张三'</code>，此时在内存中如<code>图1</code>所示，实例化一个对象相当于在堆中开辟了一块内存，内存地址为<code>017</code>，此时这个对象的引用为<code>user1</code>,内存地址为<code>001</code>,它保存了该对象在内存中的地址，也就是指向了该对象。接下了，我们调用方法<code>change()</code>，来尝试改变<code>user1</code>的<code>name</code>值以此验证<code>java</code>中的传值方式。</p>\n<p>我们将<code>user1</code>作为实参传给<code>change()</code>方法，形参<code>user2</code>来接受这个实参，在这里就体现出了两种传参方式的不同。如果是按值传递，那么就像定义的那样，如<code>图2</code>所示，<code>user2</code>是<code>user1</code>的一份副本，也就是说在传递参数时，将<code>user1</code>（本身是一个对象的引用），复制了一份，名为<code>user2</code>，它同样也是一个对象的引用，并且<code>user1</code>和<code>user2</code>此时指向同一个对象。而如果是引用传递，也如同定义的那样，如<code>图5</code>所示,在传递参数时，是直接将<code>user1</code>传递给了形参，只是换了一个名字叫做<code>user2</code>,但是本质上<code>user1</code>和<code>user2</code>其实是同一个。它是一个对象的引用。</p>\n<p>接着来分析输出的结果，不管是按值传递还是引用传递，第1行输出的结果一定都是<code>张三</code>，因为都是指向同一个对象。对于第2行输出，我们还是无法判断是哪种方式，因为都是改变同一个对象，值也会改变；关键在于第3行输出和第4行输出，此时，我们将<code>user2</code>重新指向了一个新的对象，并且为这个对象赋值<code>name = '王五'</code>，如果是<code>引用传递</code>的方式，那么<code>user1</code>同样也会改变指向，指向新的这个对象，最后一行调用方法之后输出的结果将会和第3行一样是<code>王五</code>，但是事实输出的是<code>李四</code>，这表明<code>user1</code>和<code>user2</code>其实并不是同一个。真实的调用过程如 <code>图2</code>~<code>图4</code>所示，这样才会使得<code>user2</code>指向一个新的对象后，<code>user1</code>指向的对象并没有改变，还是原来那个对象。</p>\n<p>对于基本类型的参数来说,<code>a1</code>的值最后没有改变，说明在执行方法时，<code>a2</code>是<code>a1</code>的一个副本。对于引用类型的参数来说，例如<code>User</code>对象，在调用方法时，实际上是将其引用<code>user1</code>作为实际参数，那么传递给形参的将是该引用的一份副本引用<code>user2</code>，虽然说这是两份引用（好比<code>a1</code>与<code>a2</code>的关系）。但是却指向同一个对象，所有的操作也都是对这同一个对象而言的。</p>\n<p>最后举一个例子来形象的说明这一切，假如你有一把你房间的钥匙，并且在上面刻上了你的名字，这个过程好比给一个<code>int</code>类型的<code>a1</code>初始化值为<code>5</code>。你的朋友和你关系非常好，想要你房间的钥匙，此时你并没有直接把你的钥匙给他，而是复制了一把新的钥匙，这个钥匙也能开你的房间的门。而你的朋友在这把新钥匙上刻上了他的名字。这个过程就好比调用<code>change()</code>方法，把<code>a1</code>复制了一份赋值给<code>a2</code>,此时修改<code>a2</code>和<code>a1</code>没有任何关系，你朋友在新钥匙上刻他名字也不会影响你手上那把原始的钥匙。关键是这两把钥匙都能开你的房间，就好比<code>user1</code>和<code>user2</code>都指向同一个对象。此时你朋友用这把新钥匙打开了你的房间，将你房间电视机砸了。这个过程好比改名<code>李四</code>。这时你拿着你的钥匙打开你房间必然会看到这样的场景——电视机被砸了。就如同调用方法后<code>user1</code>变成了<code>李四</code>。在调用方法的过程中，最后<code>user2</code>重新指向了一个新的对象，这就好比你的朋友将你复制给他的钥匙再次进行了加工，此时不能开你房间的门，但是能开他自己的房间，他用这把钥匙开自己的房间然后把自己的电视砸了这并不会影响到你房间的电视，也就是说最后<code>user1</code>的名字并不会变成<code>王五</code>。这就是<code>java</code>中的值传递。当然了，如果是引用传递，那么这个例子中从头到尾将会只有一把钥匙，最后的结果也将会不同。</p>\n<h2 id=\"尾声\"><a class=\"markdownIt-Anchor\" href=\"2018/08/27/java-only-pass-by-value#尾声\"></a> 尾声<a href=\"2018/08/27/java-only-pass-by-value#尾声\"></a></h2>\n<p>通过以上分析我们可以知道。<code>Java</code>中只有<strong>值传递</strong>这一种方式，只不过对于引用类型来说，<strong>传递的参数是对象的引用</strong>罢了。</p>\n","prev":{"title":"Redis系列(一):Redis的简介与安装","link":"2018/10/04/learn-redis-1"},"next":{"title":"基于ubuntu16.04部署IBM开源区块链项目-弹珠资产管理(Marbles)","link":"2018/05/15/deploy-IBM-blockchain-marbles"},"plink":"https://dmego.me/2018/08/27/java-only-pass-by-value/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 前言","id":"前言","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 值传递","id":"值传递","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 引用传递","id":"引用传递","index":"3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 结果分析","id":"结果分析","index":"4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 尾声","id":"尾声","index":"5"}],"copyright":{"link":"<a href=\"https://dmego.me/2018/08/27/java-only-pass-by-value/\" title=\"为什么说java中只有值传递\">https://dmego.me/2018/08/27/java-only-pass-by-value/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}