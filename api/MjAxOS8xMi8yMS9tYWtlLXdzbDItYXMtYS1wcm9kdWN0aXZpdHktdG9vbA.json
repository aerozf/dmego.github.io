{"title":"将WSL2作为生产力工具","date":"2019-12-21T19:46:00.000Z","author":"Dmego","thumbnail":"https://images.unsplash.com/photo-1484417894907-623942c8ee29?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjk3ODd9&auto=format&fit=crop&w=2689&q=80","link":"2019/12/21/make-wsl2-as-a-productivity-tool","comments":true,"tags":["Docker","Kubernetes","WSL2"],"categories":["技术"],"updated":"2019-12-22T18:21:32.533Z","content":"<p>适用于 <code>Linux</code> 的 <code>Windows</code> 子系统 (<code>WSL</code>) 是 <code>Windows 10</code>新增的功能，使用它可以直接在 <code>Windows</code> 上运行 <code>Linux</code> 命令。而<code>WSL 2</code> 是<code>WSL</code>的一个新版本，它支持适用于 <code>Linux</code> 的 <code>Windows</code> 子系统在 <code>Windows</code> 上运行 <code>ELF64 Linux</code> 二进制文件。 它的主要目标是提高文件系统的性能，并增加系统调用的完全兼容性。<code>WSL 2</code> 使用最新和最高的虚拟化技术在轻型实用程序虚拟机（<code>VM</code>）内部运行 <code>Linux</code> 内核。</p>\n<a id=\"more\"></a>\n<h1 id=\"启用并配置-wsl-2\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用并配置-wsl-2\"></a> 启用并配置 <code>WSL 2</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用并配置-wsl-2\"></a></h1>\n<h2 id=\"win-版本要求\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#win-版本要求\"></a> win 版本要求<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#win-版本要求\"></a></h2>\n<p><code>WSL 2</code> 仅在 <code>Windows 10 18917</code> 或更高版本中可用，如果版本太低，可以加入 <code>Windows Insider</code> 升级 <code>Windows</code> ，我们可以在 <code>cmd</code> 中使用 <code>ver</code> 来检查当前 <code>win</code>的版本。</p>\n<h2 id=\"启用虚拟机平台可选组件\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用虚拟机平台可选组件\"></a> 启用<code>虚拟机平台</code>可选组件<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用虚拟机平台可选组件\"></a></h2>\n<p>在 <code>powerShell</code> 中以管理员身份运行下面命令</p>\n<figure class=\"highlight powershell\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class=\"line\">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></div></figure>\n<p>运行完成之后，请重启电脑完成安装.</p>\n<h2 id=\"设置wsl发行版\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#设置wsl发行版\"></a> 设置WSL发行版<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#设置wsl发行版\"></a></h2>\n<p>如果想要将默认的<code>WSL</code>发行版设置成 <code>WSL 2</code>，在 <code>powerShell</code> 中使用下面命令</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --<span class=\"built_in\">set</span>-default-version 2</span><br></pre></td></tr></table></div></figure>\n<p>如果想要设置某一个发行版为<code>WSL2</code>，在 <code>powerShell</code> 中使用下面命令，将 <code>&lt;Distro&gt;</code> 换成你想要设置的发行版即可，例如 <code>Ubuntu-18.04</code></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --<span class=\"built_in\">set</span>-version &lt;Distro&gt; 2</span><br></pre></td></tr></table></div></figure>\n<p>验证使用的<code>WSL</code>版本</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl -l -v</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"下载安装-ubuntu-1804\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-ubuntu-1804\"></a> 下载安装 <code>Ubuntu-18.04</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-ubuntu-1804\"></a></h2>\n<p>在 <code>Windows</code> 应用商店里搜索 <code>Ubuntu-18.04</code> ，然后下载,下载完成之后打开 <code>Ubuntu-18.04</code> ，这时会先进行一些初始化安装的设置，然后就会让你设置新的 <code>UNIX</code>用户名和密码，设置完成之后，就进入了 <code>linux</code> 子系统。验证是否是 <code>WSL 2</code> 我们只需要在 <code>powerShell</code> 下输入 <code>wsl -l -v</code> ,输出内容如下，这里 <code>VERSION</code> 为 <code>2</code> 代表启用了 <code>WSL 2</code></p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                   STATE           VERSION</span><br><span class=\"line\">* Ubuntu-18.04           Running         2</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"ubuntu-1804更换国内源\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#ubuntu-1804更换国内源\"></a> <code>Ubuntu-18.04</code>更换国内源<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#ubuntu-1804更换国内源\"></a></h2>\n<p>首先备份一下默认的源</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sourses.list.bak</span><br></pre></td></tr></table></div></figure>\n<p>更换默认源为阿里源, 使用 <code>sudo vim /etc/apt/sources.list</code> 命令编辑，删除原来的内容，添加下面的阿里源信息</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></div></figure>\n<p>更换源之后，使用下面的命令更新一下</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgade</span><br></pre></td></tr></table></div></figure>\n<h1 id=\"安装配置-windows-terminal\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装配置-windows-terminal\"></a> 安装配置 <code>Windows Terminal</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装配置-windows-terminal\"></a></h1>\n<h2 id=\"下载-windows-terminal\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载-windows-terminal\"></a> 下载 <code>Windows Terminal</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载-windows-terminal\"></a></h2>\n<p><code>Windows Terminal</code> 是<code>win</code>推出的最新的一款命令行工具，可以在应用商店里搜索并下载，安装完成打开界面如下</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/image1.png\" alt=\"Windows Terminal\" class=\"article-img\"></p>\n<p>关于其的介绍这里就不多展开，这里记录如何使用<code>Windows Terminal</code> 连接<code>WSL 2</code>并安装配置<code>zsh</code>。</p>\n<h2 id=\"安装zsh\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装zsh\"></a> 安装<code>zsh</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装zsh\"></a></h2>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 zsh</span></span><br><span class=\"line\">sudo apt-get install zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改默认的 Shell 为 zsh</span></span><br><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"安装-oh-my-zsh\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装-oh-my-zsh\"></a> 安装 <code>oh-my-zsh</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装-oh-my-zsh\"></a></h2>\n<p><code>oh-my-zsh</code>用于快速配置<code>zsh</code>，进入<a href=\"https://ohmyz.sh/\" target=\"_blank\" rel=\"noopener\">官网</a>或者<a href=\"https://github.com/ohmyzsh/ohmyzsh\" target=\"_blank\" rel=\"noopener\">Github</a>可以了解其基本使用及其丰富的主题使用，安装只需要执行下面代码即可</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></table></div></figure>\n<p>安装<code>zsh-syntax-higlighting</code>语法高亮插件</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动到 plugins 文件夹中</span></span><br><span class=\"line\">mv -p zsh-syntax-highlighting <span class=\"variable\">$ZSH_CUSTOM</span>/plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">vim .zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在 plugins 一列中添加 zsh-syntax-highlighting，如下</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">         git</span><br><span class=\"line\">         zsh-syntax-highlighting</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在文件最后添加</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></div></figure>\n<p>安装<code>zsh-autosuggestions</code>语法历史记录插件</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动到 plugins 文件夹中</span></span><br><span class=\"line\">mv -p zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">vim .zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在 plugins 一列中添加 zsh-autosuggestions，如下</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">         git</span><br><span class=\"line\">         zsh-syntax-highlighting</span><br><span class=\"line\">         zsh-autosuggestions</span><br><span class=\"line\">         )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在文件最后添加</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></div></figure>\n<p>配置完成之后，默认的主题光标如下所示，如果想要配置更加丰富的主题，可以自行百度</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/image2.png\" alt=\"默认配置\" class=\"article-img\"></p>\n<h1 id=\"安装并配置docker环境\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装并配置docker环境\"></a> 安装并配置<code>Docker</code>环境<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装并配置docker环境\"></a></h1>\n<h2 id=\"在wsl-2中安装-docker\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#在wsl-2中安装-docker\"></a> 在<code>WSL 2</code>中安装 <code>Docker</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#在wsl-2中安装-docker\"></a></h2>\n<p>卸载旧版本</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></div></figure>\n<p>设置存储库</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 apt 包索引</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装软件包以允许 apt 通过 HTTPS 使用存储库</span></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置稳定的存储库</span></span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"variable\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable\"</span></span><br></pre></td></tr></table></div></figure>\n<p>安装<code>Docker</code> 社区版(<code>docker-ce</code>)</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 apt 包索引</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新版本的 Docker 和 containerd</span></span><br><span class=\"line\">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"comment\"># (*)安装特定版本;&lt;VERSION&gt; 为具体版本,例如 18.09.1</span></span><br><span class=\"line\">sudo apt-get install docker-ce=&lt;VERSION&gt; docker-ce-cli=&lt;VERSION&gt; containerd.io</span><br></pre></td></tr></table></div></figure>\n<p>启动 <code>docker</code> 并设置开机自启</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 docker</span></span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker.service</span><br></pre></td></tr></table></div></figure>\n<p>如果非 <code>root</code> 用户想要使用 <code>docker</code> ，需要将该用户添加到 <code>docker</code> 用户组</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker user-name</span><br></pre></td></tr></table></div></figure>\n<p>(*)卸载docker</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">sudo apt-get purge docker-ce</span><br><span class=\"line\"><span class=\"comment\"># 删除 docker 的容器,镜像,卷等存储</span></span><br><span class=\"line\">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"下载安装-docker-desktop-wsl-2-backend\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-docker-desktop-wsl-2-backend\"></a> 下载安装 <code>Docker Desktop WSL 2 backend</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-docker-desktop-wsl-2-backend\"></a></h2>\n<p><code>WSL 2</code> 引入了重大的体系结构更改，因为它是 <code>Microsoft</code> 构建的完整 <code>Linux</code> 内核，允许 <code>Linux</code> 容器在没有仿真的情况下本机运行，而 <code>Docker</code> 也专门开发了可以使用 <code>WSL 2</code> 中的 <code>Docker</code> 守护进程的桌面管理程序, 打开 <a href=\"https://docs.docker.com/docker-for-windows/wsl-tech-preview/\" target=\"_blank\" rel=\"noopener\">Docker Desktop WSL2 backend</a> 页面，下载最新的程序,安装之后,打开程序做如下设置</p>\n<ul>\n<li>\n<p>启用基于实验性<code>WSL 2</code>的引擎复选框(<code>Enable the experimental WSL 2 based engine</code>)</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/Untitled.png\" alt=\"启用基于实验性 WSL2 的引擎复选框\" class=\"article-img\"></p>\n</li>\n<li>\n<p>(*) 暴露 <code>2375</code> 端口，让外部其他程序也能管理 <code>Docker</code> (打开 <code>Expose daemon on tcp://localhost:2375 without TLS</code> 前面的复选框)</p>\n</li>\n<li>\n<p>在 <code>Resources</code> 中设置要从哪个 <code>WSL 2</code> 发行版中访问 <code>Docker</code>，如下图使用的是 <code>Ubuntu-18.04</code></p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/Untitled1.png\" alt=\"设置 Docker 访问的发行版\" class=\"article-img\"></p>\n</li>\n</ul>\n<p>配置完成之后,点击 <code>Apply &amp; Restart</code> 应用并重启 <code>Docker Desktop</code> 。重启完成之后，我们看到 <code>Desktop</code> 左下脚的 <code>Docker</code> 状态为绿色的 <code>running</code> 表示 <code>Docker</code> 正在运行。</p>\n<p>要想知道自己安装的 <code>Docker</code> 的相关版本信息，我们可以在 <code>About Docker Desktop</code> 中看到，如下图所示，目前安装的 <code>Docker Engine</code> 版本为 <code>19.03.5</code> ，<code>Docker-compose</code> 版本为 <code>1.25.1-rc1</code> ，支持的 <code>Kubernetes</code> 版本为 <code>v1.15.5</code>  。</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/Untitled2.png\" alt=\"查看 Desktop 版本\" class=\"article-img\"></p>\n<h1 id=\"安装并配置-kubernetes-环境\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装并配置-kubernetes-环境\"></a> 安装并配置 <code>Kubernetes</code> 环境<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#安装并配置-kubernetes-环境\"></a></h1>\n<h2 id=\"修改-docker-daemon-配置\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#修改-docker-daemon-配置\"></a> 修改 <code>Docker daemon</code> 配置<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#修改-docker-daemon-配置\"></a></h2>\n<p>docker 默认 <code>Cgroup Driver</code> 为 <code>cgroup</code> ，但是在 <code>kubernetes1.14</code> 之后的版本推荐使用 <code>systemd</code> 来作为 <code>Docker</code> 的 <code>cgroup</code> 驱动 。使使用 <code>vim /etc/docker/deamon.json</code> 命令修改或新建配置，具体配置内容可以参考 <a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes/\" target=\"_blank\" rel=\"noopener\">Kubernetes 官方</a>。</p>\n<p>另外我们还需要配置一下 <code>Docker</code> 国内的镜像源，加速你的镜像下载速度，一般使用的有阿里和中科大的镜像源。上面的两项配置步骤如下</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 deamon 文件</span></span><br><span class=\"line\">vim /etc/docker/deamon.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入如下内容</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://6e0d9uoa.mirror.aliyuncs.com\"</span>,<span class=\"string\">\"https://docker.mirrors.ustc.edu.cn\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"exec-opts\"</span>: [<span class=\"string\">\"native.cgroupdriver=systemd\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"log-driver\"</span>: <span class=\"string\">\"json-file\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log-opts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"max-size\"</span>: <span class=\"string\">\"100m\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"storage-driver\"</span>: <span class=\"string\">\"overlay2\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 Docker</span></span><br><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"下载-kubernetes-所需的镜像\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载-kubernetes-所需的镜像\"></a> 下载 <code>Kubernetes</code> 所需的镜像<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载-kubernetes-所需的镜像\"></a></h2>\n<p>由于国内网络的问题，如果你不开代理，直接在 <code>Decker Desktop</code> 中选择启用 <code>Kubernetes</code> 是启动不了的，还好阿里云容器服务在 <code>Github</code> 上有开源 <a href=\"https://github.com/AliyunContainerService/k8s-for-docker-desktop\" target=\"_blank\" rel=\"noopener\">Docker Desktop for Mac/Windows  开启  Kubernetes</a> 的项目，我们只需要下载下来，执行脚本就能把所有 <code>Kubernetes</code> 所需要的镜像都下载到本地。</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将项目下载到本地</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/AliyunContainerService/k8s-for-docker-desktop</span><br><span class=\"line\"><span class=\"comment\">#进入项目目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> k8s-for-docker-desktop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#由于最新 master 已经支持 kubernetes v1.15.5,所以直接执行下载脚本即可</span></span><br><span class=\"line\">./load_images.sh</span><br></pre></td></tr></table></div></figure>\n<p>待所有镜像下载完成之后，我们在使用 <code>docker images</code> 可以看到下载的容器</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY                                                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">k8s.gcr.io/kube-apiserver                                        v1.15.5             e534b1952a0d        2 months ago        207MB</span><br><span class=\"line\">k8s.gcr.io/kube-proxy                                            v1.15.5             cbd7f21fec99        2 months ago        82.4MB</span><br><span class=\"line\">k8s.gcr.io/kube-controller-manager                               v1.15.5             1399a72fa1a9        2 months ago        159MB</span><br><span class=\"line\">k8s.gcr.io/kube-scheduler                                        v1.15.5             fab2dded59dd        2 months ago        81.1MB</span><br><span class=\"line\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller   0.26.1              29024c9c6e70        2 months ago        483MB</span><br><span class=\"line\">docker/kube-compose-controller                                   v0.4.23             a8c3d87a58e7        6 months ago        35.3MB</span><br><span class=\"line\">docker/kube-compose-api-server                                   v0.4.23             f3591b2cb223        6 months ago        49.9MB</span><br><span class=\"line\">k8s.gcr.io/coredns                                               1.3.1               eb516548c180        11 months ago       40.3MB</span><br><span class=\"line\">k8s.gcr.io/kubernetes-dashboard-amd64                            v1.10.1             f9aed6605b81        12 months ago       122MB</span><br><span class=\"line\">k8s.gcr.io/etcd                                                  3.3.10              2c4adeb21b4f        12 months ago       258MB</span><br><span class=\"line\">k8s.gcr.io/pause                                                 3.1                 da86e6ba6ca1        24 months ago       742kB</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"启用-kubernetes\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用-kubernetes\"></a> 启用 <code>Kubernetes</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#启用-kubernetes\"></a></h2>\n<p>我们在 <code>Docker Desktop</code> 的设置中选择启用 <code>kubernetes</code> ，然后点击 <code>Apply &amp; Restart</code> 重启。</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/Untitled3.png\" alt=\"启用 Kubernetes \" class=\"article-img\"></p>\n<p>如果运气好的话，当你重启之后你就会发现 <code>Desktop</code> 左下脚 <code>Docker</code> 和 <code>Kubernetes</code> 的状态都变成了绿色的 <code>runnning</code> ，但是很有可能你重启之后， <code>kubernetes</code> 的状态一直是黄色的 <code>starting</code> 。出现这种情况不要着急，我们可以在 <code>C:\\ProgramData\\DockerDesktop</code>下的 <code>service.txt</code> 查看启动的日志信息，一般情况下，启动不成功，出现最多的日志信息为下面的重复内容</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[08:57:24.359][ApiProxy          ][Info   ] time=<span class=\"string\">\"2019-12-20T08:57:24+08:00\"</span> msg=<span class=\"string\">\"cannot list nodes: Get https://kubernetes.docker.internal:6443/api/v1/nodes: EOF\"</span></span><br><span class=\"line\">[08:57:24.359][GoBackendProcess  ][Info   ] time=<span class=\"string\">\"2019-12-20T08:57:24+08:00\"</span> msg=<span class=\"string\">\"external: POST /events 200 \\\"Go-http-client/1.1\\\" \\\"\\\"\"</span></span><br></pre></td></tr></table></div></figure>\n<p>出现这种情况，可以参考 <a href=\"https://github.com/docker/for-win/issues/3769#issuecomment-486046718\" target=\"_blank\" rel=\"noopener\"><code>Issue 3769(comment)</code></a>和  <a href=\"https://github.com/docker/for-win/issues/1962#issuecomment-431091114\" target=\"_blank\" rel=\"noopener\"><code>Issue 1962(comment)</code></a>，其实总结下来就是下面的几个操作：</p>\n<ul>\n<li>\n<p>修改 <code>host</code> 文件，将 <code>127.0.0.1 kubernetes.docker.internal</code> 映射信息添加到 <code>host</code> 文件中</p>\n</li>\n<li>\n<p>修改网络连接的 <code>DNS</code> 地址为 <code>8.8.8.8</code> ， <code>win</code> 下如何修改网络连接的 <code>DNS</code> 可以自行百度</p>\n</li>\n<li>\n<p>删除 <code>C:\\ProgramData\\DockerDesktop</code> 目录下的 <code>pki</code> 目录文件</p>\n</li>\n<li>\n<p>删除 <code>C:\\Users\\&lt;yourname&gt;目录下</code> 的<code>.kube</code> 目录文件</p>\n</li>\n<li>\n<p>关闭 <code>win</code> 的网络防火墙，或者将 <code>vpnkit.exe</code> 添加到防火墙出入站规则中。</p>\n</li>\n<li>\n<p>在 <code>Desktop</code> 中点击进入 <code>troubleshoot</code> ，点击重置 <code>kubernetes</code> 集群(<code>Reset Kubernetes cluster</code>)</p>\n<p><img src=\"/2019/12/21/make-wsl2-as-a-productivity-tool/Untitled4.png\" alt=\"重置 kubernetes 集群\" class=\"article-img\"></p>\n</li>\n</ul>\n<p>如果上述操作一次下来还是不成功，建议重复操作几次。如果出现了其他的问题，一般到 <a href=\"https://github.com/docker/for-win/issues\" target=\"_blank\" rel=\"noopener\">docker\\for-win</a> 项目的 <code>issue</code>下可以找到解决方法。如果启动成功了，我们在命令行下执行下面的命令可以验证</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">Kubernetes master is running at https://kubernetes.docker.internal:6443</span><br><span class=\"line\">KubeDNS is running at https://kubernetes.docker.internal:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">To further debug and diagnose cluster problems, use <span class=\"string\">'kubectl cluster-info dump'</span>.</span><br><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME             STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">docker-desktop   Ready    master   6h    v1.15.5</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"部署-kubernetes-dashboard\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#部署-kubernetes-dashboard\"></a> 部署 <code>Kubernetes dashboard</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#部署-kubernetes-dashboard\"></a></h2>\n<p><a href=\"https://github.com/kubernetes/dashboard\" target=\"_blank\" rel=\"noopener\">Kubernetes dashboard</a>是 <code>Kubernetes</code>集群的基于 <code>Web</code>的通用 <code>UI</code>。它允许用户管理集群中运行的应用程序并对其进行故障排除，以及管理集群本身。执行下面命命令即可部署</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建 dashboard 资源</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (*)如果上面命令执行说网络连接有问题，把 yaml 文件下载到本地，然后执行</span></span><br><span class=\"line\">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 API Server 访问代理</span></span><br><span class=\"line\">kubectl proxy</span><br></pre></td></tr></table></div></figure>\n<p>部署完成之后，我们通过如下 <code>URL</code> 即可访问 <code>Kubernetes dashboard</code></p>\n<blockquote>\n<p><a href=\"http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login\" target=\"_blank\" rel=\"noopener\">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>\n</blockquote>\n<p>进入 <code>Dashboard</code> 需要令牌，可以通过以下命令获取令牌，将生成的令牌复制粘贴到令牌登录输入框即可。</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system describe secret default| awk <span class=\"string\">'$1==\"token:\"{print $2&#125;'</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"下载安装-helm\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-helm\"></a> 下载安装 <code>Helm</code><a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#下载安装-helm\"></a></h2>\n<p><a href=\"https://helm.sh/\" target=\"_blank\" rel=\"noopener\">Helm</a>是 <a href=\"https://deis.com/\" target=\"_blank\" rel=\"noopener\">Deis</a> 开发的一个用于 <code>kubernetes</code> 的包管理器。每个包称为一个 <code>Chart</code> ， <code>Helm</code> 客户端安装十分简单，我们可以到 <a href=\"https://github.com/helm/helm/releases\" target=\"_blank\" rel=\"noopener\">Github</a>下载最新的可执行程序，解压出来就可以使用了，具体操作步骤可如下：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载 v2.16.1 版本</span></span><br><span class=\"line\">wget https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf helm-v2.16.1-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> linux-amd64/</span><br><span class=\"line\"><span class=\"comment\"># 移动到 /usr/local/bin 目录下</span></span><br><span class=\"line\">cp helm /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></div></figure>\n<p>服务端 <code>tiller</code> 安装起来就相对来说不是那么容易了，因为要下载墙外的镜像。好在 <code>Docker Hub</code>  上有别人打包上传的镜像，我们只需要 <code>pull</code> 下来，打个 <code>tag</code> 即可，具体步骤如下：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载镜像到本地</span></span><br><span class=\"line\">docker pull doublemine/kubernetes-helm.tiller:v2.16.1</span><br><span class=\"line\"><span class=\"comment\"># 添加 tag</span></span><br><span class=\"line\">docker tag doublemine/kubernetes-helm.tiller:v2.16.1 gcr.io/kubernetes-helm/tiller:v2.16.1</span><br></pre></td></tr></table></div></figure>\n<p>服务端的镜像下载到本地之后，我们就可以在集群上安装 <code>tiller</code> ，我们可以运行下面的命令来创建服务账号和初始化客户端</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create serviceaccount tiller -n kube-system</span><br><span class=\"line\">kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount kube-system:tiller</span><br><span class=\"line\">helm init --<span class=\"built_in\">wait</span> --service-account tiller</span><br></pre></td></tr></table></div></figure>\n<p>安装和初始化完成之后，我们想要验证 <code>tiller</code> 服务是否运行，可以使用如下命令</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod --namespace kube-system</span><br><span class=\"line\">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">coredns-5c98db65d4-7rn5b                 1/1     Running   0          12h</span><br><span class=\"line\">coredns-5c98db65d4-bx9x2                 1/1     Running   0          12h</span><br><span class=\"line\">etcd-docker-desktop                      1/1     Running   0          12h</span><br><span class=\"line\">kube-apiserver-docker-desktop            1/1     Running   0          12h</span><br><span class=\"line\">kube-controller-manager-docker-desktop   1/1     Running   0          12h</span><br><span class=\"line\">kube-proxy-rdtfm                         1/1     Running   0          12h</span><br><span class=\"line\">kube-scheduler-docker-desktop            1/1     Running   0          12h</span><br><span class=\"line\">kubernetes-dashboard-7d75c474bb-qcbxx    1/1     Running   0          4h46m</span><br><span class=\"line\">tiller-deploy-54f7455d59-fgsnb           1/1     Running   0          12h</span><br></pre></td></tr></table></div></figure>\n<p>我们可以看到最后一列显示 <code>tiller</code> 服务正在运行。</p>\n<h2 id=\"helm-配置国内镜像源\"><a class=\"markdownIt-Anchor\" href=\"2019/12/21/make-wsl2-as-a-productivity-tool#helm-配置国内镜像源\"></a> Helm 配置国内镜像源<a href=\"2019/12/21/make-wsl2-as-a-productivity-tool#helm-配置国内镜像源\"></a></h2>\n<p>当我们使用 <code>helm</code> 安装应用的时候，我们会发现下载速度特别慢，还有可能会遇到网络的问题，这种情况我们需要配置其默认下载的镜像源为国内。具体配置步骤如下：</p>\n<figure class=\"highlight bash\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除默认的镜像源</span></span><br><span class=\"line\">helm repo remove stable</span><br><span class=\"line\"><span class=\"comment\"># 增加新的国内镜像源</span></span><br><span class=\"line\">helm repo add stable http://mirror.azure.cn/kubernetes/charts/</span><br><span class=\"line\">helm repo add incubator http://mirror.azure.cn/kubernetes/charts-incubator/</span><br><span class=\"line\"><span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">sudo helm repo update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试速度</span></span><br><span class=\"line\">helm search mysql</span><br></pre></td></tr></table></div></figure>\n","next":{"title":"许嵩博文句子摘录","link":"2018/12/08/excerpts-from-xusong-blog"},"plink":"https://dmego.me/2019/12/21/make-wsl2-as-a-productivity-tool/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 启用并配置 <code>WSL 2</code>","id":"启用并配置-wsl-2","index":"1","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> win 版本要求","id":"win-版本要求","index":"1.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 启用<code>虚拟机平台</code>可选组件","id":"启用虚拟机平台可选组件","index":"1.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 设置WSL发行版","id":"设置wsl发行版","index":"1.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 下载安装 <code>Ubuntu-18.04</code>","id":"下载安装-ubuntu-1804","index":"1.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> <code>Ubuntu-18.04</code>更换国内源","id":"ubuntu-1804更换国内源","index":"1.5"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 安装配置 <code>Windows Terminal</code>","id":"安装配置-windows-terminal","index":"2","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 下载 <code>Windows Terminal</code>","id":"下载-windows-terminal","index":"2.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 安装<code>zsh</code>","id":"安装zsh","index":"2.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 安装 <code>oh-my-zsh</code>","id":"安装-oh-my-zsh","index":"2.3"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 安装并配置<code>Docker</code>环境","id":"安装并配置docker环境","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 在<code>WSL 2</code>中安装 <code>Docker</code>","id":"在wsl-2中安装-docker","index":"3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 下载安装 <code>Docker Desktop WSL 2 backend</code>","id":"下载安装-docker-desktop-wsl-2-backend","index":"3.2"}]},{"title":"<a class=\"markdownIt-Anchor\"></a> 安装并配置 <code>Kubernetes</code> 环境","id":"安装并配置-kubernetes-环境","index":"4","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 修改 <code>Docker daemon</code> 配置","id":"修改-docker-daemon-配置","index":"4.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 下载 <code>Kubernetes</code> 所需的镜像","id":"下载-kubernetes-所需的镜像","index":"4.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 启用 <code>Kubernetes</code>","id":"启用-kubernetes","index":"4.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 部署 <code>Kubernetes dashboard</code>","id":"部署-kubernetes-dashboard","index":"4.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 下载安装 <code>Helm</code>","id":"下载安装-helm","index":"4.5"},{"title":"<a class=\"markdownIt-Anchor\"></a> Helm 配置国内镜像源","id":"helm-配置国内镜像源","index":"4.6"}]}],"copyright":{"link":"<a href=\"https://dmego.me/2019/12/21/make-wsl2-as-a-productivity-tool/\" title=\"将WSL2作为生产力工具\">https://dmego.me/2019/12/21/make-wsl2-as-a-productivity-tool/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}